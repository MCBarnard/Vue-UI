{"ast":null,"code":"import ShowcaseComponent from \"@/components/ShowcaseComponent\";\nimport LinkComponent from \"@/components/Vue-UI/LinkComponent\";\nimport SelectComponent from \"@/components/Controls/SelectComponent\";\nimport InputComponent from \"@/components/Controls/InputComponent\";\nimport ToggleComponent from \"@/components/Controls/ToggleComponent\";\nimport PrismComponent from \"@/components/PrismComponent\";\nimport TableComponent from \"@/components/TableComponent\";\nimport * as ToggleComponentMarkdown from \"@/assets/ComponentMarkdown/ToggleComponentMarkdown\";\nexport default {\n  components: {\n    ShowcaseComponent,\n    LinkComponent,\n    SelectComponent,\n    InputComponent,\n    ToggleComponent,\n    PrismComponent,\n    TableComponent\n  },\n  data() {\n    return {\n      active: true,\n      variant: \"\",\n      label: \"\",\n      labelBehind: false,\n      routeName: \"link\",\n      text: \"Some Link going some where\",\n      linkTitle: \"A link to somewhere\",\n      href: \"\",\n      variantOptions: [\"info\", \"success\", \"warning\", \"danger\"],\n      code: ToggleComponentMarkdown.default,\n      propHeadings: [\"Prop\", \"Type\", \"Example\", \"Required\", \"Description\"],\n      propDetails: [[\"variant\", \"String\", \"'' / 'info' / 'success' / 'warning' / 'danger'\", \"No\", \"This defines what color your link will be.\"], [\"text\", \"String\", \"true\", \"Yes\", \"This configures the rendered text on the screen\"], [\"to\", \"String\", \"link\", \"No\", \"This defines what component gets used under the hood, if it isn't empty we use a vue-route component, to which you we pass {name: 'theNameYouSpecified'}\"], [\"href\", \"String\", \"http://localhost\", \"No\", \"This defines what component gets used under the hood, if it isn't empty and the 'to' prop is empty we use an anchor tag, to which you we pass href='theHrefYouSpecified'\"], [\"title\", \"String\", \"Text to come up when hovering the link\", \"No\", \"We set the title prop on the anchor tag\"], [\"openOnNewPage\", \"Boolean\", \"true\", \"No\", \"This will cause the link to open in a new tab\"]]\n    };\n  },\n  methods: {\n    variantChanged(item) {\n      this.variant = item;\n    },\n    handleActiveChange() {\n      this.active = !this.active;\n    },\n    handleLabelBehindChange() {\n      this.labelBehind = !this.labelBehind;\n    },\n    handleLabelChange(item) {\n      if (item.target.value) {\n        this.label = item.target.value;\n      }\n    },\n    handleHrefChange(item) {\n      if (item.target.value) {\n        this.routeName = \"\";\n        this.href = item.target.value;\n        alert(`Will make this link point to src=\"${item.target.value}\"`);\n      }\n    },\n    handleTextChange(item) {\n      if (item.target.value) this.text = item.target.value;\n    },\n    handleLinkTitleChange(item) {\n      if (item.target.value) this.linkTitle = item.target.value;\n    },\n    handleToggledChange() {\n      this.targetToggle = !this.targetToggle;\n    }\n  },\n  computed: {\n    selectedVariant() {\n      return this.variant;\n    },\n    computedActive() {\n      return this.active;\n    },\n    computedLabel() {\n      return this.label;\n    },\n    computedLabelBehind() {\n      return this.labelBehind;\n    },\n    computedHref() {\n      return this.href;\n    },\n    computedText() {\n      return this.text;\n    },\n    computedRouteName() {\n      return this.routeName;\n    },\n    computedLinkTitle() {\n      return this.linkTitle;\n    },\n    computedTargetToggle() {\n      return this.targetToggle;\n    }\n  }\n};","map":{"version":3,"names":["ShowcaseComponent","LinkComponent","SelectComponent","InputComponent","ToggleComponent","PrismComponent","TableComponent","ToggleComponentMarkdown","components","data","active","variant","label","labelBehind","routeName","text","linkTitle","href","variantOptions","code","default","propHeadings","propDetails","methods","variantChanged","item","handleActiveChange","handleLabelBehindChange","handleLabelChange","target","value","handleHrefChange","alert","handleTextChange","handleLinkTitleChange","handleToggledChange","targetToggle","computed","selectedVariant","computedActive","computedLabel","computedLabelBehind","computedHref","computedText","computedRouteName","computedLinkTitle","computedTargetToggle"],"sources":["/Users/thinusbarnard/Desktop/Personal Projects/vue-ui-library/src/views/Components/TogglePage.vue"],"sourcesContent":["<template>\n  <div class=\"link-page\">\n    <ShowcaseComponent>\n      <template v-slot:component>\n        <toggle-component\n          size=\"small\"\n          :variant=\"selectedVariant\"\n          :state=\"computedActive\"\n          @toggle=\"handleToggledChange\"\n          :label=\"computedLabel\"\n        />\n      </template>\n      <template v-slot:controls>\n        <table class=\"props-table\">\n          <tr>\n            <td>variant</td>\n            <td>\n              <select-component\n                :state=\"selectedVariant\"\n                @selected=\"variantChanged\"\n                :data=\"variantOptions\"\n                defaults=\"default\"\n              />\n            </td>\n            <td class=\"divider\"></td>\n            <td>to</td>\n            <td>\n              <input-component\n                :value=\"computedRouteName\"\n                @change=\"handleLinkChange\"\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>title</td>\n            <td>\n              <input-component\n                :value=\"computedLinkTitle\"\n                @change=\"handleLinkTitleChange\"\n              />\n            </td>\n            <td class=\"divider\"></td>\n            <td>text</td>\n            <td>\n              <input-component\n                :value=\"computedText\"\n                @change=\"handleTextChange\"\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>href</td>\n            <td>\n              <input-component\n                :value=\"computedHref\"\n                @change=\"handleHrefChange\"\n              />\n            </td>\n            <td class=\"divider\"></td>\n            <td>openOnNewPage</td>\n            <td>\n              <toggle-component\n                size=\"small\"\n                variant=\"info\"\n                :state=\"computedTargetToggle\"\n                @toggle=\"handleToggledChange\"\n              />\n            </td>\n          </tr>\n        </table>\n      </template>\n      <template v-slot:code>\n        <prism-component :code=\"code\" nameOfFile=\"LinkComponent.vue\" />\n      </template>\n      <template v-slot:docs>\n        <table-component :headings=\"propHeadings\" :items=\"propDetails\" />\n      </template>\n    </ShowcaseComponent>\n  </div>\n</template>\n\n<script>\nimport ShowcaseComponent from \"@/components/ShowcaseComponent\";\nimport LinkComponent from \"@/components/Vue-UI/LinkComponent\";\nimport SelectComponent from \"@/components/Controls/SelectComponent\";\nimport InputComponent from \"@/components/Controls/InputComponent\";\nimport ToggleComponent from \"@/components/Controls/ToggleComponent\";\nimport PrismComponent from \"@/components/PrismComponent\";\nimport TableComponent from \"@/components/TableComponent\";\nimport * as ToggleComponentMarkdown from \"@/assets/ComponentMarkdown/ToggleComponentMarkdown\";\n\nexport default {\n  components: {\n    ShowcaseComponent,\n    LinkComponent,\n    SelectComponent,\n    InputComponent,\n    ToggleComponent,\n    PrismComponent,\n    TableComponent,\n  },\n  data() {\n    return {\n      active: true,\n      variant: \"\",\n      label: \"\",\n      labelBehind: false,\n\n\n\n\n      routeName: \"link\",\n      text: \"Some Link going some where\",\n      linkTitle: \"A link to somewhere\",\n      href: \"\",\n      variantOptions: [\"info\", \"success\", \"warning\", \"danger\"],\n      code: ToggleComponentMarkdown.default,\n      propHeadings: [\"Prop\", \"Type\", \"Example\", \"Required\", \"Description\"],\n      propDetails: [\n        [\n          \"variant\",\n          \"String\",\n          \"'' / 'info' / 'success' / 'warning' / 'danger'\",\n          \"No\",\n          \"This defines what color your link will be.\",\n        ],\n        [\n          \"text\",\n          \"String\",\n          \"true\",\n          \"Yes\",\n          \"This configures the rendered text on the screen\",\n        ],\n        [\n          \"to\",\n          \"String\",\n          \"link\",\n          \"No\",\n          \"This defines what component gets used under the hood, if it isn't empty we use a vue-route component, to which you we pass {name: 'theNameYouSpecified'}\",\n        ],\n        [\n          \"href\",\n          \"String\",\n          \"http://localhost\",\n          \"No\",\n          \"This defines what component gets used under the hood, if it isn't empty and the 'to' prop is empty we use an anchor tag, to which you we pass href='theHrefYouSpecified'\",\n        ],\n        [\n          \"title\",\n          \"String\",\n          \"Text to come up when hovering the link\",\n          \"No\",\n          \"We set the title prop on the anchor tag\",\n        ],\n        [\n          \"openOnNewPage\",\n          \"Boolean\",\n          \"true\",\n          \"No\",\n          \"This will cause the link to open in a new tab\",\n        ],\n      ],\n    };\n  },\n  methods: {\n    variantChanged(item) {\n      this.variant = item;\n    },\n    handleActiveChange() {\n      this.active = !this.active;\n    },\n    handleLabelBehindChange() {\n      this.labelBehind = !this.labelBehind;\n    },\n    handleLabelChange(item) {\n      if (item.target.value) {\n        this.label = item.target.value;\n      }\n    },\n\n\n    handleHrefChange(item) {\n      if (item.target.value) {\n        this.routeName = \"\";\n        this.href = item.target.value;\n        alert(`Will make this link point to src=\"${item.target.value}\"`);\n      }\n    },\n    handleTextChange(item) {\n      if (item.target.value) this.text = item.target.value;\n    },\n    handleLinkTitleChange(item) {\n      if (item.target.value) this.linkTitle = item.target.value;\n    },\n    handleToggledChange() {\n      this.targetToggle = !this.targetToggle;\n    },\n  },\n  computed: {\n    selectedVariant() {\n      return this.variant;\n    },\n    computedActive() {\n      return this.active;\n    },\n    computedLabel() {\n      return this.label;\n    },\n    computedLabelBehind() {\n      return this.labelBehind;\n    },\n\n\n\n\n    computedHref() {\n      return this.href;\n    },\n    computedText() {\n      return this.text;\n    },\n    computedRouteName() {\n      return this.routeName;\n    },\n    computedLinkTitle() {\n      return this.linkTitle;\n    },\n    computedTargetToggle() {\n      return this.targetToggle;\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n* {\n  box-sizing: border-box;\n}\n\n.link-page {\n  padding-top: 3rem;\n\n  .props-table {\n    td {\n      padding: 0 5px;\n    }\n    .divider {\n      width: 50px;\n      height: 100%;\n      position: relative;\n\n      &:after {\n        content: \"\";\n        position: absolute;\n        top: -2px;\n        transform: translateX(-50%);\n        left: 50%;\n        width: 2px;\n        height: calc(100% + 4px);\n        background: grey;\n      }\n    }\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}