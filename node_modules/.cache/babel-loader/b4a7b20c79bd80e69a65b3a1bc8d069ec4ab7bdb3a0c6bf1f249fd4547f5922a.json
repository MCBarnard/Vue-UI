{"ast":null,"code":"import NotificationComponent from \"@/components/Vue-UI/NotificationComponent\";\nimport ShowcaseComponent from \"@/components/ShowcaseComponent\";\nimport ToggleComponent from \"@/components/Controls/ToggleComponent\";\nimport SelectComponent from \"@/components/Vue-UI/SelectComponent\";\nimport PrismComponent from \"@/components/PrismComponent\";\nimport TableComponent from \"@/components/TableComponent\";\nimport * as AccordionComponentMarkdown from \"@/assets/ComponentMarkdown/AccordionComponentMarkdown\";\nexport default {\n  components: {\n    ShowcaseComponent,\n    ToggleComponent,\n    PrismComponent,\n    TableComponent,\n    NotificationComponent\n  },\n  data() {\n    return {\n      variant: \"info\",\n      variantOptions: [\"info\", \"success\", \"warning\", \"danger\"],\n      focusTextArea: false,\n      autoClose: false,\n      rounded: false,\n      items: [{\n        title: \"What is the answer to life, the universe and everything?\",\n        content: \"42\"\n      }, {\n        title: \" How do you catch a squirrel?\",\n        content: \"Climb a tree and act like a nut!\"\n      }, {\n        title: \"What do you call a snowman with a six-pack?\",\n        content: \"An abdominal snowman!\"\n      }],\n      code: AccordionComponentMarkdown.default,\n      propHeadings: [\"Prop\", \"Type\", \"Example\", \"Required\", \"Description\"],\n      propDetails: [[\"autoClose\", \"Boolean\", \"true\", \"No\", \"If true, the accordion will automatically close previous tabs\"], [\"rounded\", \"Boolean\", \"true\", \"No\", \"Will round the top and bottom items giving it a rounded look\"], [\"items\", \"Array\", \"[{title: 'Some question', content: 'some answer'}]\", \"Yes\", \"The content of your accordion\"]]\n    };\n  },\n  methods: {\n    variantChanged(item) {\n      return this.variant = item;\n    },\n    autoCloseChanged() {\n      this.autoClose = !this.autoClose;\n    },\n    roundedChanged() {\n      this.rounded = !this.rounded;\n    },\n    itemsChanged(item) {\n      if (item.target.value || item.target.value === \"\") {\n        this.items = JSON.parse(item.target.value);\n      }\n    }\n  },\n  computed: {\n    computedVariant() {\n      return this.variant;\n    },\n    computedAutoClose() {\n      return this.autoClose;\n    },\n    computedRounded() {\n      return this.rounded;\n    }\n  }\n};","map":{"version":3,"names":["NotificationComponent","ShowcaseComponent","ToggleComponent","SelectComponent","PrismComponent","TableComponent","AccordionComponentMarkdown","components","data","variant","variantOptions","focusTextArea","autoClose","rounded","items","title","content","code","default","propHeadings","propDetails","methods","variantChanged","item","autoCloseChanged","roundedChanged","itemsChanged","target","value","JSON","parse","computed","computedVariant","computedAutoClose","computedRounded"],"sources":["/Users/thinusbarnard/Desktop/Personal Projects/vue-ui-library/src/views/Interface/NotificationPage.vue"],"sourcesContent":["<template>\n  <div class=\"notification-page\">\n    <ShowcaseComponent>\n      <template v-slot:component>\n        <notification-component :variant=\"computedRounded\" />\n      </template>\n      <template v-slot:controls>\n        <table class=\"props-table\">\n          <tr>\n            <td>variant</td>\n            <td>\n              <select-component\n                :state=\"computedVariant\"\n                @selected=\"variantChanged\"\n                :data=\"variantOptions\"\n                defaults=\"default\"\n              />\n            </td>\n            <td class=\"divider\"></td>\n            <td>rounded</td>\n            <toggle-component\n              size=\"small\"\n              variant=\"info\"\n              :state=\"computedRounded\"\n              @toggle=\"roundedChanged\"\n            />\n          </tr>\n        </table>\n      </template>\n      <template v-slot:code>\n        <prism-component :code=\"code\" nameOfFile=\"AccordionComponent.vue\" />\n      </template>\n      <template v-slot:docs>\n        <table-component :headings=\"propHeadings\" :items=\"propDetails\" />\n      </template>\n    </ShowcaseComponent>\n  </div>\n</template>\n\n<script>\nimport NotificationComponent from \"@/components/Vue-UI/NotificationComponent\";\nimport ShowcaseComponent from \"@/components/ShowcaseComponent\";\nimport ToggleComponent from \"@/components/Controls/ToggleComponent\";\nimport SelectComponent from \"@/components/Vue-UI/SelectComponent\";\nimport PrismComponent from \"@/components/PrismComponent\";\nimport TableComponent from \"@/components/TableComponent\";\nimport * as AccordionComponentMarkdown from \"@/assets/ComponentMarkdown/AccordionComponentMarkdown\";\n\nexport default {\n  components: {\n    ShowcaseComponent,\n    ToggleComponent,\n    PrismComponent,\n    TableComponent,\n    NotificationComponent,\n  },\n  data() {\n    return {\n      variant: \"info\",\n      variantOptions: [\"info\", \"success\", \"warning\", \"danger\"],\n      focusTextArea: false,\n      autoClose: false,\n      rounded: false,\n      items: [\n        {\n          title: \"What is the answer to life, the universe and everything?\",\n          content: \"42\",\n        },\n        {\n          title: \" How do you catch a squirrel?\",\n          content: \"Climb a tree and act like a nut!\",\n        },\n        {\n          title: \"What do you call a snowman with a six-pack?\",\n          content: \"An abdominal snowman!\",\n        },\n      ],\n      code: AccordionComponentMarkdown.default,\n      propHeadings: [\"Prop\", \"Type\", \"Example\", \"Required\", \"Description\"],\n      propDetails: [\n        [\n          \"autoClose\",\n          \"Boolean\",\n          \"true\",\n          \"No\",\n          \"If true, the accordion will automatically close previous tabs\",\n        ],\n        [\n          \"rounded\",\n          \"Boolean\",\n          \"true\",\n          \"No\",\n          \"Will round the top and bottom items giving it a rounded look\",\n        ],\n        [\n          \"items\",\n          \"Array\",\n          \"[{title: 'Some question', content: 'some answer'}]\",\n          \"Yes\",\n          \"The content of your accordion\",\n        ],\n      ],\n    };\n  },\n  methods: {\n    variantChanged(item) {\n      return (this.variant = item);\n    },\n    autoCloseChanged() {\n      this.autoClose = !this.autoClose;\n    },\n    roundedChanged() {\n      this.rounded = !this.rounded;\n    },\n    itemsChanged(item) {\n      if (item.target.value || item.target.value === \"\") {\n        this.items = JSON.parse(item.target.value);\n      }\n    },\n  },\n  computed: {\n    computedVariant() {\n      return this.variant;\n    },\n    computedAutoClose() {\n      return this.autoClose;\n    },\n    computedRounded() {\n      return this.rounded;\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n* {\n  box-sizing: border-box;\n}\n\n.notification-page {\n  padding-top: 3rem;\n\n  .props-table {\n    td {\n      padding: 0 5px;\n    }\n    .divider {\n      width: 50px;\n      height: 100%;\n      position: relative;\n\n      &:after {\n        content: \"\";\n        position: absolute;\n        top: -2px;\n        transform: translateX(-50%);\n        left: 50%;\n        width: 2px;\n        height: calc(100% + 4px);\n        background: grey;\n      }\n    }\n  }\n}\n</style>\n"],"mappings":"AAwCA,OAAOA,qBAAoB,MAAO,2CAA2C;AAC7E,OAAOC,iBAAgB,MAAO,gCAAgC;AAC9D,OAAOC,eAAc,MAAO,uCAAuC;AACnE,OAAOC,eAAc,MAAO,qCAAqC;AACjE,OAAOC,cAAa,MAAO,6BAA6B;AACxD,OAAOC,cAAa,MAAO,6BAA6B;AACxD,OAAO,KAAKC,0BAAyB,MAAO,uDAAuD;AAEnG,eAAe;EACbC,UAAU,EAAE;IACVN,iBAAiB;IACjBC,eAAe;IACfE,cAAc;IACdC,cAAc;IACdL;EACF,CAAC;EACDQ,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC;MACxDC,aAAa,EAAE,KAAK;MACpBC,SAAS,EAAE,KAAK;MAChBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,CACL;QACEC,KAAK,EAAE,0DAA0D;QACjEC,OAAO,EAAE;MACX,CAAC,EACD;QACED,KAAK,EAAE,+BAA+B;QACtCC,OAAO,EAAE;MACX,CAAC,EACD;QACED,KAAK,EAAE,6CAA6C;QACpDC,OAAO,EAAE;MACX,CAAC,CACF;MACDC,IAAI,EAAEX,0BAA0B,CAACY,OAAO;MACxCC,YAAY,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,CAAC;MACpEC,WAAW,EAAE,CACX,CACE,WAAW,EACX,SAAS,EACT,MAAM,EACN,IAAI,EACJ,+DAA+D,CAChE,EACD,CACE,SAAS,EACT,SAAS,EACT,MAAM,EACN,IAAI,EACJ,8DAA8D,CAC/D,EACD,CACE,OAAO,EACP,OAAO,EACP,oDAAoD,EACpD,KAAK,EACL,+BAA+B,CAChC;IAEL,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAACC,IAAI,EAAE;MACnB,OAAQ,IAAI,CAACd,OAAM,GAAIc,IAAI;IAC7B,CAAC;IACDC,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACZ,SAAQ,GAAI,CAAC,IAAI,CAACA,SAAS;IAClC,CAAC;IACDa,cAAcA,CAAA,EAAG;MACf,IAAI,CAACZ,OAAM,GAAI,CAAC,IAAI,CAACA,OAAO;IAC9B,CAAC;IACDa,YAAYA,CAACH,IAAI,EAAE;MACjB,IAAIA,IAAI,CAACI,MAAM,CAACC,KAAI,IAAKL,IAAI,CAACI,MAAM,CAACC,KAAI,KAAM,EAAE,EAAE;QACjD,IAAI,CAACd,KAAI,GAAIe,IAAI,CAACC,KAAK,CAACP,IAAI,CAACI,MAAM,CAACC,KAAK,CAAC;MAC5C;IACF;EACF,CAAC;EACDG,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACvB,OAAO;IACrB,CAAC;IACDwB,iBAAiBA,CAAA,EAAG;MAClB,OAAO,IAAI,CAACrB,SAAS;IACvB,CAAC;IACDsB,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACrB,OAAO;IACrB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}