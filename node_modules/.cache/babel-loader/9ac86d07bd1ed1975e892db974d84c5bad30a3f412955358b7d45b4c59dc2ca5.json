{"ast":null,"code":"export default `<template>\n<div v-for=\"(item, key) in items\" :key=\"key\">\n  <button\n    @click=\"\n      () => {\n        toggleItem(key);\n      }\n    \"\n    :class=\"[\n      'accordion',\n      \\`\\${rand}\\`,\n      \\`\\${rand}-\\${key}\\`,\n      { 'rounded-top': key === 0 && rounded },\n      { 'rounded-bottom': key === items.length - 1 && rounded },\n    ]\"\n  >\n    {{ item.title }}\n  </button>\n  <div\n    :class=\"[\n      'panel',\n      \\`\\${rand}\\`,\n      \\`\\${rand}-\\$\\{key}\\`,\n      { 'rounded-bottom': key === items.length - 1 && rounded },\n    ]\"\n  >\n    <p>{{ item.content }}</p>\n  </div>\n</div>\n</template>\n\n<script>\n// move data values into props to make this component re- usable\nexport default {\ndata() {\n  return {\n    rand: \\`id-\\${(Math.random() + 1).toString(36).substring(2)}\\`,\n  };\n},\nprops: {\n  autoClose: Boolean, // true / false\n  rounded: Boolean, // true / false\n  items: Array, // {title: \"What is the ultimate answer to life?\", content: \"The answer to the question of life\"}\n},\ncomputed: {\n  computedAutoClose() {\n    return this.autoClose;\n  },\n},\nmethods: {\n  closeAllDropDowns(key) {\n    const buttons = document.querySelectorAll(\\`.accordion.\\${this.rand}\\`);\n    const panels = document.querySelectorAll(\\`.panel.\\${this.rand}\\`);\n\n    buttons.forEach((item) => {\n      // Do not close the currently clicked item if it is clicked again\n      if (item.classList.contains(\\`\\${this.rand}-\\${key}\\`)) {\n        return false;\n      }\n      if (item.classList.contains(\"active\")) {\n        item.classList.toggle(\"active\");\n      }\n    });\n\n    panels.forEach((item) => {\n      // Do not close the currently clicked item if it is clicked again\n      if (item.classList.contains(\\`\\${this.rand}-\\${key}\\`)) {\n        return false;\n      }\n      if (item.style.maxHeight !== null) {\n        item.style.maxHeight = null;\n      }\n    });\n  },\n  toggleItem(item) {\n    // Close all\n    if (this.computedAutoClose) this.closeAllDropDowns(item);\n\n    // Toggle new Dropdown\n    const button = document.querySelector(\\`.accordion.\\${this.rand}-\\${item}\\`);\n    const panel = document.querySelector(\\`.panel.\\${this.rand}-\\${item}\\`);\n\n    button.classList.toggle(\"active\");\n    this.$emit(\"toggled\", \\`\\${this.rand}-\\${item}\\`);\n    if (panel.style.maxHeight) {\n      panel.style.maxHeight = null;\n    } else {\n      panel.style.maxHeight = panel.scrollHeight + \"px\";\n    }\n  },\n},\n};\n</script>\n\n<style scoped lang=\"scss\">\n.rounded-top {\nborder-radius: 10px 10px 0 0;\n}\n.rounded-bottom {\nborder-radius: 0 0 10px 10px;\n\n&.active {\n  border-radius: 0;\n}\n}\n\n.accordion {\nbackground-color: #eee;\ncolor: #444;\ncursor: pointer;\npadding: 18px;\nwidth: 100%;\nborder: none;\ntext-align: left;\noutline: none;\nfont-size: 15px;\ntransition: 0.4s;\n\n&:after {\n  content: \"\\\\002B\";\n  color: #777;\n  font-weight: bold;\n  float: right;\n  margin-left: 5px;\n}\n}\n\n.active,\n.accordion:hover {\nbackground-color: #ccc;\n}\n\n.active:after {\ncontent: \"\\\\2212\";\n}\n\n.panel {\npadding: 0 18px;\nbackground-color: white;\nmax-height: 0;\noverflow: hidden;\ntransition: max-height 0.2s ease-out;\n\n&.active.rounded-bottom {\n  border-radius: 0 0 10px 10px;\n}\n}\n</style>\n\n`;","map":{"version":3,"names":[],"sources":["/Users/thinusbarnard/Desktop/Personal Projects/vue-ui-library/src/assets/ComponentMarkdown/AccordionComponentMarkdown.js"],"sourcesContent":["export default `<template>\n<div v-for=\"(item, key) in items\" :key=\"key\">\n  <button\n    @click=\"\n      () => {\n        toggleItem(key);\n      }\n    \"\n    :class=\"[\n      'accordion',\n      \\`\\${rand}\\`,\n      \\`\\${rand}-\\${key}\\`,\n      { 'rounded-top': key === 0 && rounded },\n      { 'rounded-bottom': key === items.length - 1 && rounded },\n    ]\"\n  >\n    {{ item.title }}\n  </button>\n  <div\n    :class=\"[\n      'panel',\n      \\`\\${rand}\\`,\n      \\`\\${rand}-\\$\\{key}\\`,\n      { 'rounded-bottom': key === items.length - 1 && rounded },\n    ]\"\n  >\n    <p>{{ item.content }}</p>\n  </div>\n</div>\n</template>\n\n<script>\n// move data values into props to make this component re- usable\nexport default {\ndata() {\n  return {\n    rand: \\`id-\\${(Math.random() + 1).toString(36).substring(2)}\\`,\n  };\n},\nprops: {\n  autoClose: Boolean, // true / false\n  rounded: Boolean, // true / false\n  items: Array, // {title: \"What is the ultimate answer to life?\", content: \"The answer to the question of life\"}\n},\ncomputed: {\n  computedAutoClose() {\n    return this.autoClose;\n  },\n},\nmethods: {\n  closeAllDropDowns(key) {\n    const buttons = document.querySelectorAll(\\`.accordion.\\${this.rand}\\`);\n    const panels = document.querySelectorAll(\\`.panel.\\${this.rand}\\`);\n\n    buttons.forEach((item) => {\n      // Do not close the currently clicked item if it is clicked again\n      if (item.classList.contains(\\`\\${this.rand}-\\${key}\\`)) {\n        return false;\n      }\n      if (item.classList.contains(\"active\")) {\n        item.classList.toggle(\"active\");\n      }\n    });\n\n    panels.forEach((item) => {\n      // Do not close the currently clicked item if it is clicked again\n      if (item.classList.contains(\\`\\${this.rand}-\\${key}\\`)) {\n        return false;\n      }\n      if (item.style.maxHeight !== null) {\n        item.style.maxHeight = null;\n      }\n    });\n  },\n  toggleItem(item) {\n    // Close all\n    if (this.computedAutoClose) this.closeAllDropDowns(item);\n\n    // Toggle new Dropdown\n    const button = document.querySelector(\\`.accordion.\\${this.rand}-\\${item}\\`);\n    const panel = document.querySelector(\\`.panel.\\${this.rand}-\\${item}\\`);\n\n    button.classList.toggle(\"active\");\n    this.$emit(\"toggled\", \\`\\${this.rand}-\\${item}\\`);\n    if (panel.style.maxHeight) {\n      panel.style.maxHeight = null;\n    } else {\n      panel.style.maxHeight = panel.scrollHeight + \"px\";\n    }\n  },\n},\n};\n</script>\n\n<style scoped lang=\"scss\">\n.rounded-top {\nborder-radius: 10px 10px 0 0;\n}\n.rounded-bottom {\nborder-radius: 0 0 10px 10px;\n\n&.active {\n  border-radius: 0;\n}\n}\n\n.accordion {\nbackground-color: #eee;\ncolor: #444;\ncursor: pointer;\npadding: 18px;\nwidth: 100%;\nborder: none;\ntext-align: left;\noutline: none;\nfont-size: 15px;\ntransition: 0.4s;\n\n&:after {\n  content: \"\\\\002B\";\n  color: #777;\n  font-weight: bold;\n  float: right;\n  margin-left: 5px;\n}\n}\n\n.active,\n.accordion:hover {\nbackground-color: #ccc;\n}\n\n.active:after {\ncontent: \"\\\\2212\";\n}\n\n.panel {\npadding: 0 18px;\nbackground-color: white;\nmax-height: 0;\noverflow: hidden;\ntransition: max-height 0.2s ease-out;\n\n&.active.rounded-bottom {\n  border-radius: 0 0 10px 10px;\n}\n}\n</style>\n\n`;\n"],"mappings":"AAAA,eAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}