{"ast":null,"code":"import { toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-420f8d2d\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"outer\"\n};\nconst _hoisted_2 = {\n  class: \"inner\"\n};\nconst _hoisted_3 = [\"width\", \"height\"];\nconst _hoisted_4 = {\n  id: \"GradientColor\"\n};\nconst _hoisted_5 = [\"stop-color\"];\nconst _hoisted_6 = [\"stop-color\"];\nconst _hoisted_7 = [\"cx\", \"cy\", \"r\", \"stroke-linecap\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['skill', {\n      showTrack: $props.showTrack\n    }]),\n    style: _normalizeStyle(`--total-skill: ${$options.computedPercentage}; --circumference: ${$options.computedCircumference};--box:${$options.computedBoxSize}px;--border-size: ${$options.computedBorder}px`)\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [!$props.hideValue ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    id: \"number\",\n    class: _normalizeClass([{\n      bold: $props.bold\n    }, $props.size])\n  }, _toDisplayString($data.counter) + \"% \", 3 /* TEXT, CLASS */)) : _createCommentVNode(\"v-if\", true)])]), (_openBlock(), _createElementBlock(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    version: \"1.1\",\n    width: `${$options.computedBoxSize}px`,\n    height: `${$options.computedBoxSize}px`\n  }, [_createElementVNode(\"defs\", null, [_createElementVNode(\"linearGradient\", _hoisted_4, [_createElementVNode(\"stop\", {\n    offset: \"0%\",\n    \"stop-color\": $options.computedStartColor\n  }, null, 8 /* PROPS */, _hoisted_5), _createElementVNode(\"stop\", {\n    offset: \"100%\",\n    \"stop-color\": $options.computedEndColor\n  }, null, 8 /* PROPS */, _hoisted_6)])]), _createElementVNode(\"circle\", {\n    cx: $options.computedRadius + $options.computedBorder / 2,\n    cy: $options.computedRadius + $options.computedBorder / 2,\n    r: $options.computedRadius,\n    \"stroke-linecap\": $options.capShape\n  }, null, 8 /* PROPS */, _hoisted_7)], 8 /* PROPS */, _hoisted_3))], 6 /* CLASS, STYLE */);\n}","map":{"version":3,"names":["class","id","_createElementBlock","_normalizeClass","showTrack","$props","style","_normalizeStyle","$options","computedPercentage","computedCircumference","computedBoxSize","computedBorder","_createElementVNode","_hoisted_1","_hoisted_2","hideValue","bold","size","$data","counter","xmlns","version","width","height","_hoisted_4","offset","computedStartColor","computedEndColor","cx","computedRadius","cy","r","capShape"],"sources":["/Users/thinusbarnard/Desktop/Personal Projects/vue-ui-library/src/components/Vue-UI/CircularProgressComponent.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"['skill', { showTrack }]\"\n    :style=\"`--total-skill: ${computedPercentage}; --circumference: ${computedCircumference};--box:${computedBoxSize}px;--border-size: ${computedBorder}px`\"\n  >\n    <div class=\"outer\">\n      <div class=\"inner\">\n        <div id=\"number\" v-if=\"!hideValue\" :class=\"[{ bold }, size]\">\n          {{ counter }}%\n        </div>\n      </div>\n    </div>\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      version=\"1.1\"\n      :width=\"`${computedBoxSize}px`\"\n      :height=\"`${computedBoxSize}px`\"\n    >\n      <defs>\n        <linearGradient id=\"GradientColor\">\n          <stop offset=\"0%\" :stop-color=\"computedStartColor\" />\n          <stop offset=\"100%\" :stop-color=\"computedEndColor\" />\n        </linearGradient>\n      </defs>\n      <circle\n        :cx=\"computedRadius + computedBorder / 2\"\n        :cy=\"computedRadius + computedBorder / 2\"\n        :r=\"computedRadius\"\n        :stroke-linecap=\"capShape\"\n      />\n    </svg>\n  </div>\n</template>\n\n<script>\n// move data values into props to make this component re- usable\nexport default {\n  data() {\n    return {\n      interval: setInterval(() => {}),\n      counter: 0,\n      percentage: 0,\n    };\n  },\n  props: {\n    variant: String, // '' / info / success / warning / danger\n    rounded: Boolean, // true / false\n    gradient: Boolean, // true / false\n    value: Number, // 78\n    showTrack: Boolean, // true / false\n    size: String, // small, medium, large\n    bold: Boolean, // true, false\n    hideValue: Boolean, // true, false\n  },\n  computed: {\n    computedPercentage() {\n      return this.percentage < 100 ? this.percentage : 100;\n    },\n    computedBoxSize() {\n      return this.computedRadius * 2 + this.computedBorder;\n    },\n    computedCircumference() {\n      switch (this.size) {\n        case \"small\":\n          return 157.08;\n        case \"medium\":\n          return 219.91;\n        case \"large\":\n          return 345.58;\n        case \"extra-large\":\n          return 502.65;\n        default:\n          return 219.91;\n      }\n    },\n    computedRadius() {\n      switch (this.size) {\n        case \"small\":\n          return 25;\n        case \"medium\":\n          return 35;\n        case \"large\":\n          return 55;\n        case \"extra-large\":\n          return 80;\n        default:\n          return 35;\n      }\n    },\n    computedBorder() {\n      switch (this.size) {\n        case \"small\":\n          return 10;\n        case \"medium\":\n          return 15;\n        case \"large\":\n          return 20;\n        case \"extra-large\":\n          return 25;\n        default:\n          return 15;\n      }\n    },\n    capShape() {\n      return this.rounded ? \"round\" : \"square\";\n    },\n    computedStartColor() {\n      if (this.gradient && !this.variant) {\n        return \"#f900ff\";\n      } else if (!this.gradient && !this.variant) {\n        return \"#ce00ff\";\n      } else if (!this.gradient && this.variant === \"info\") {\n        return \"#218afa\";\n      } else if (this.gradient && this.variant === \"info\") {\n        return \"#00a6eb\";\n      } else if (!this.gradient && this.variant === \"success\") {\n        return \"#00b014\";\n      } else if (this.gradient && this.variant === \"success\") {\n        return \"#00ff19\";\n      } else if (!this.gradient && this.variant === \"warning\") {\n        return \"#ff6300\";\n      } else if (this.gradient && this.variant === \"warning\") {\n        return \"#ff9d00\";\n      } else if (!this.gradient && this.variant === \"danger\") {\n        return \"#ff0000\";\n      } else if (this.gradient && this.variant === \"danger\") {\n        return \"#ff0000\";\n      }\n      return \"#a900ff\";\n    },\n    computedEndColor() {\n      if (this.gradient && !this.variant) {\n        return \"#673ab7\";\n      } else if (!this.gradient && !this.variant) {\n        return \"#ce00ff\";\n      } else if (!this.gradient && this.variant === \"info\") {\n        return \"#218afa\";\n      } else if (this.gradient && this.variant === \"info\") {\n        return \"#1046cf\";\n      } else if (!this.gradient && this.variant === \"success\") {\n        return \"#00b014\";\n      } else if (this.gradient && this.variant === \"success\") {\n        return \"#00b014\";\n      } else if (!this.gradient && this.variant === \"warning\") {\n        return \"#ff6300\";\n      } else if (this.gradient && this.variant === \"warning\") {\n        return \"#e20404\";\n      } else if (!this.gradient && this.variant === \"danger\") {\n        return \"#ff0000\";\n      } else if (this.gradient && this.variant === \"danger\") {\n        return \"#aa0625\";\n      }\n      return \"#a900ff\";\n    },\n  },\n  methods: {\n    triggerAnimation() {\n      setTimeout(() => {\n        this.animateProgress(this.value);\n      }, 100);\n    },\n    animateProgress(total) {\n      this.percentage = total;\n      clearInterval(this.interval);\n      this.interval = setInterval(() => {\n        if (this.counter > this.computedPercentage) {\n          this.counter--;\n        } else if (this.counter < this.computedPercentage) {\n          this.counter++;\n        } else {\n          clearInterval(this.interval);\n        }\n        if (this.counter > 100) clearInterval(this.interval);\n      }, 20);\n    },\n  },\n  watch: {\n    value() {\n      this.triggerAnimation();\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.skill {\n  width: var(--box);\n  height: var(--box);\n  border-radius: 50%;\n  position: relative;\n  border: 1px solid transparent;\n\n  &.showTrack {\n    border: 1px solid #f1f1f1;\n    background: red;\n    border-radius: 50%;\n\n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(calc(-50% + 1px), calc(-50% + 1px));\n      border: 1px solid #f1f1f1;\n      width: calc(var(--box) - var(--border-size) * 2);\n      height: calc(var(--box) - var(--border-size) * 2);\n      border-radius: 50%;\n      background: #fff;\n    }\n  }\n}\n\n.outer {\n  height: var(--box);\n  width: var(--box);\n  border-radius: 50%;\n  position: relative;\n}\n\n.inner {\n  height: 100%;\n  width: 100%;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  z-index: 2;\n}\n\n#number {\n  color: #555;\n\n  &.bold {\n    font-weight: bold;\n  }\n\n  &.small {\n    font-size: 12px;\n  }\n\n  &.medium {\n    font-size: 16px;\n  }\n\n  &.large {\n    font-size: 20px;\n  }\n\n  &.extra-large {\n    font-size: 26px;\n  }\n}\n\ncircle {\n  fill: none;\n  stroke: url(#GradientColor);\n  stroke-width: var(--border-size);\n  stroke-dasharray: var(--circumference);\n  stroke-dashoffset: calc(\n    var(--circumference) - (var(--circumference) * var(--total-skill) / 100)\n  );\n  transition: all 2s;\n}\n\nsvg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 2s;\n}\n</style>\n"],"mappings":";;;EAKSA,KAAK,EAAC;AAAO;;EACXA,KAAK,EAAC;AAAO;;;EAaAC,EAAE,EAAC;AAAe;;;;;uBAlBxCC,mBAAA,CA8BM;IA7BHF,KAAK,EAAAG,eAAA;MAAAC,SAAA,EAAcC,MAAA,CAAAD;IAAS;IAC5BE,KAAK,EAAAC,eAAA,mBAAoBC,QAAA,CAAAC,kBAAkB,sBAAsBD,QAAA,CAAAE,qBAAqB,UAAUF,QAAA,CAAAG,eAAe,qBAAqBH,QAAA,CAAAI,cAAc;MAEnJC,mBAAA,CAMM,OANNC,UAMM,GALJD,mBAAA,CAIM,OAJNE,UAIM,G,CAHoBV,MAAA,CAAAW,SAAS,I,cAAjCd,mBAAA,CAEM;;IAFDD,EAAE,EAAC,QAAQ;IAAoBD,KAAK,EAAAG,eAAA;MAAAc,IAAA,EAAKZ,MAAA,CAAAY;IAAI,GAAIZ,MAAA,CAAAa,IAAI;sBACrDC,KAAA,CAAAC,OAAO,IAAG,IACf,0B,sDAGJlB,mBAAA,CAkBM;IAjBJmB,KAAK,EAAC,4BAA4B;IAClCC,OAAO,EAAC,KAAK;IACZC,KAAK,KAAKf,QAAA,CAAAG,eAAe;IACzBa,MAAM,KAAKhB,QAAA,CAAAG,eAAe;MAE3BE,mBAAA,CAKO,eAJLA,mBAAA,CAGiB,kBAHjBY,UAGiB,GAFfZ,mBAAA,CAAqD;IAA/Ca,MAAM,EAAC,IAAI;IAAE,YAAU,EAAElB,QAAA,CAAAmB;uCAC/Bd,mBAAA,CAAqD;IAA/Ca,MAAM,EAAC,MAAM;IAAE,YAAU,EAAElB,QAAA,CAAAoB;2CAGrCf,mBAAA,CAKE;IAJCgB,EAAE,EAAErB,QAAA,CAAAsB,cAAc,GAAGtB,QAAA,CAAAI,cAAc;IACnCmB,EAAE,EAAEvB,QAAA,CAAAsB,cAAc,GAAGtB,QAAA,CAAAI,cAAc;IACnCoB,CAAC,EAAExB,QAAA,CAAAsB,cAAc;IACjB,gBAAc,EAAEtB,QAAA,CAAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}